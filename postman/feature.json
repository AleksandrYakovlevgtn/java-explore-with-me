{
	"info": {
		"_postman_id": "8b3c96cf-fbcc-4091-9394-f93728833291",
		"name": "feature_subscriptions",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27074402"
	},
	"item": [
		{
			"name": "category",
			"item": [
				{
					"name": "добавление Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Категория должна содержать поля: id, name\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('name');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(target.id).to.not.be.null;",
									"    pm.expect(source.name).equal(target.name, 'Название категории должно совпадать с отправленным');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\" : null, \n\t\"name\" : \"Category\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "добавление Category_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Категория должна содержать поля: id, name\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('name');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(target.id).to.not.be.null;",
									"    pm.expect(source.name).equal(target.name, 'Название категории должно совпадать с отправленным');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\" : null, \n\t\"name\" : \"Category_2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "добавление Category_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Категория должна содержать поля: id, name\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('name');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(target.id).to.not.be.null;",
									"    pm.expect(source.name).equal(target.name, 'Название категории должно совпадать с отправленным');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\" : null, \n\t\"name\" : \"Category_3\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "добавление User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.eql(201);",
									"});",
									"pm.test(\"Test create user\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.email, '\"email\" field').to.eql('user1@user.com');",
									"    pm.expect(jsonData.name, '\"name\" field').to.eql('user1');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user1@user.com\",\n  \"name\": \"user1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "добавление User_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.eql(201);",
									"});",
									"pm.test(\"Test create user\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.email, '\"email\" field').to.eql('user2@user.com');",
									"    pm.expect(jsonData.name, '\"name\" field').to.eql('user2');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user2@user.com\",\n  \"name\": \"user2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "добавление User_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.eql(201);",
									"});",
									"pm.test(\"Test create user\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.email, '\"email\" field').to.eql('user3@user.com');",
									"    pm.expect(jsonData.name, '\"name\" field').to.eql('user3');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user3@user.com\",\n  \"name\": \"user3\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "event",
			"item": [
				{
					"name": "добавление Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);  ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('title');",
									"pm.expect(target).to.have.property('annotation');",
									"pm.expect(target).to.have.property('category');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(target.id).to.not.be.null;",
									"    pm.expect(target.title).equal(source.title, \"title\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Event Сплав на байдарках\",\n  \"category\": 1,\n  \"description\": \"Сплав на байдарках.Бла бла ла ла блаа бла да\",\n  \"eventDate\": \"2024-01-01 15:15:15\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false,\n  \"title\": \"Event1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "добавление Event_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);  ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('title');",
									"pm.expect(target).to.have.property('annotation');",
									"pm.expect(target).to.have.property('category');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(target.id).to.not.be.null;",
									"    pm.expect(target.title).equal(source.title, \"title\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Event_2 полет на дуге.\",\n  \"category\": 2,\n  \"description\": \"Полет на дуге это больная фонтазия руками в воде.\",\n  \"eventDate\": \"2024-12-12 12:12:12\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false,\n  \"title\": \"Event2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/2/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "добавление Event_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);  ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('title');",
									"pm.expect(target).to.have.property('annotation');",
									"pm.expect(target).to.have.property('category');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(target.id).to.not.be.null;",
									"    pm.expect(target.title).equal(source.title, \"title\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Event_3 чувство обновления.\",\n  \"category\": 3,\n  \"description\": \"чувство обновления лиш дарит медмтация если конечно знать что делать.\",\n  \"eventDate\": \"2024-01-01 18:18:18\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false,\n  \"title\": \"Event3\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/2/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2",
								"events"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "subscription",
			"item": [
				{
					"name": "добавление Subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Подписка должна содержать поля: id, favorites\", function () {",
									"pm.expect(target.id).to.not.be.null;",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('favorites');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\" : null, \n\t\"favorites\" : [\n\t\t2, \n\t\t3\n\t]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/subscriptions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "добавление Subscription_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Подписка должна содержать поля: id, favorites\", function () {",
									"pm.expect(target.id).to.not.be.null;",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('favorites');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\" : null, \n\t\"favorites\" : [\n\t\t1, \n\t\t3\n\t]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/2/subscriptions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2",
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "добавление Subscription_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Подписка должна содержать поля: id, favorites\", function () {",
									"pm.expect(target.id).to.not.be.null;",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('favorites');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\" : null, \n\t\"favorites\" : [\n\t\t1, \n\t\t2\n\t]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/3/subscriptions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"3",
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "добавление Subscription уже существуещего",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
									"    pm.response.to.have.status(409);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\" : null, \n\t\"favorites\" : [\n\t\t1, \n\t\t2\n\t]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/3/subscriptions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"3",
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "добавление Subscription с несуществующим пользователем",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\" : null, \n\t\"favorites\" : [\n\t\t1, \n\t\t2\n\t]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/999/subscriptions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"999",
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "обновление Subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Подписка должна содержать поля: id, favorites\", function () {",
									"pm.expect(target.id).to.not.be.null;",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('favorites');",
									"});",
									"",
									"pm.test(\"Подписка должна содержать соответствующие id пользователей\", function () {",
									"    var jsonData = pm.response.json();",
									"    const fav = jsonData.favorites;",
									"    pm.expect(fav.length, \"Кол-во отслеживаемых пользователей\" ).to.eql(1);",
									"    pm.expect(fav[0].id, \"Количество обьектов\" ).to.eql(2);   ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\" : null, \n\t\"favorites\" : [\n\t\t2\n\t]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/subscriptions/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"subscriptions",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "изменение на ненаблюдающего",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Поле observable должно соответствовать false\", function () {",
									"    pm.expect(pm.response.json().observable, '\"observable\" field').to.be.false;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/3?observable=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"3"
							],
							"query": [
								{
									"key": "observable",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "изменение Subscription без наблюдателя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\" : null, \n\t\"favorites\" : [\n\t\t2, \n        3\n\t]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/subscriptions/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"subscriptions",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "поиск Subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Подписка должна содержать поля: id, favorites\", function () {",
									"pm.expect(target.id).to.not.be.null;",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('favorites');",
									"});",
									"",
									"pm.test(\"Подписка должна содержать соответствующие id пользователей\", function () {",
									"    var jsonData = pm.response.json();",
									"    const fav = jsonData.favorites;",
									"    pm.expect(fav.length, \"Кол-во отслеживаемых пользователей\" ).to.eql(1);",
									"    pm.expect(fav[0].id, \"ID первого элемена\" ).to.eql(2);   ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/1/subscriptions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "поиск Subscription_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Подписка должна содержать поля: id, favorites\", function () {",
									"pm.expect(target.id).to.not.be.null;",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('favorites');",
									"});",
									"",
									"pm.test(\"Подписка должна содержать соответствующие id пользователей\", function () {",
									"    var jsonData = pm.response.json();",
									"    const fav = jsonData.favorites;",
									"    pm.expect(fav.length, \"Кол-во отслеживаемых пользователей\" ).to.eql(2);",
									"    pm.expect(fav[0].id, \"ID первого элемена\" ).to.be.oneOf([1,3]);    ",
									"    pm.expect(fav[1].id, \"ID второго элемена\" ).to.be.oneOf([1,3]);  ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/2/subscriptions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2",
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "поиск Subscription_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Подписка должна содержать поля: id, favorites\", function () {",
									"pm.expect(target.id).to.not.be.null;",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('favorites');",
									"});",
									"",
									"pm.test(\"Подписка должна содержать соответствующие id пользователей\", function () {",
									"    var jsonData = pm.response.json();",
									"    const fav = jsonData.favorites;",
									"    pm.expect(fav.length, \"Кол-во отслеживаемых пользователей\" ).to.eql(2);",
									"    pm.expect(fav[0].id, \"ID первого элемена\" ).to.be.oneOf([1,2]);   ",
									"    pm.expect(fav[1].id, \"ID второго элемена\" ).to.be.oneOf([1,2]);   ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/3/subscriptions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"3",
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "поиск Favorite Events for User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Кол-во полученных событий должно соответсвовать\", function () {",
									"    pm.expect(target.length, \"Кол-во событий\" ).to.eql(2);",
									"});",
									"",
									"pm.test(\"Подписка должна содержать соответствующие id пользователей\", function () {",
									"    pm.expect(target[0].initiator.id, \"ID инициатора первого события\" ).to.be.oneOf([2]);   ",
									"    pm.expect(target[1].initiator.id, \"ID инициатора второго событи\" ).to.be.oneOf([2]);   ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/1/subscriptions/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"subscriptions",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "поиск Favorite Events for User_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Кол-во полученных событий должно соответсвовать\", function () {",
									"    pm.expect(target.length, \"Кол-во событий\" ).to.eql(1);",
									"});",
									"",
									"pm.test(\"Подписка должна содержать соответствующие id пользователей\", function () {",
									"    pm.expect(target[0].initiator.id, \"ID инициатора первого события\" ).to.be.oneOf([1]);   ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/2/subscriptions/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2",
								"subscriptions",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "поиск Favorite Events for User_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Кол-во полученных событий должно соответсвовать\", function () {",
									"    pm.expect(target.length, \"Кол-во событий\" ).to.eql(3);",
									"});",
									"",
									"pm.test(\"Подписка должна содержать соответствующие id пользователей\", function () {",
									"    pm.expect(target[0].initiator.id, \"ID инициатора первого события\" ).to.be.oneOf([1, 2]);  ",
									"    pm.expect(target[1].initiator.id, \"ID инициатора второго события\" ).to.be.oneOf([1, 2]);  ",
									"    pm.expect(target[2].initiator.id, \"ID инициатора третьего события\" ).to.be.oneOf([1, 2]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/3/subscriptions/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"3",
								"subscriptions",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "удаление отсутствующего Subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/1/subscriptions/100",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"subscriptions",
								"100"
							]
						}
					},
					"response": []
				},
				{
					"name": "удаление Subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/1/subscriptions/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"subscriptions",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "поиск Subscription после удаления",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/1/subscriptions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"subscriptions"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}